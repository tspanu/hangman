{"version":3,"sources":["scripts/hangman.js","scripts/requests.js","index.js"],"names":["Hangman","word","remainingGuesses","toLowerCase","split","guessedLetters","status","finished","every","letter","includes","guess","isUnique","isBadGuess","push","calculateStatus","join","puzzle","forEach","getPuzzle","wordCount","fetch","response","json","data","Error","getCurrentCountry","getLocation","getCountry","location","country","countryCode","find","alpha2Code","game1","puzzleEl","document","querySelector","guessesEl","window","addEventListener","e","String","fromCharCode","charCode","makeGuess","render","innerHTML","textContent","statusMessage","letterEl","createElement","appendChild","startGame"],"mappings":"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","file":"src.46df0ebf.map","sourceRoot":"../src","sourcesContent":["export default class Hangman {\n    constructor(word, remainingGuesses) {\n        this.word = word.toLowerCase().split('')\n        this.remainingGuesses = remainingGuesses\n        this.guessedLetters = []\n        this.status = 'playing'\n    }\n    calculateStatus() {\n        const finished = this.word.every((letter) => this.guessedLetters.includes(letter) || letter === ' ')\n\n        if (this.remainingGuesses === 0) {\n            this.status = 'failed'\n        } else if (finished) {\n            this.status = 'finished'\n        } else {\n            this.status = 'playing'\n        }\n    }\n    get statusMessage() {\n        if (this.status === 'playing') {\n            return `Guesses left: ${this.remainingGuesses}`\n        } else if (this.status === 'failed') {\n            return `Nice try! The word was \"${this.word.join('')}\".`\n        } else {\n            return 'Great work! You guessed the word.'\n        }\n    }\n    get puzzle() {\n        let puzzle = ''\n\n        this.word.forEach((letter) => {\n            if (this.guessedLetters.includes(letter) || letter === ' ') {\n                puzzle += letter\n            } else {\n                puzzle += '*'\n            }\n        })\n\n        return puzzle\n    }\n    makeGuess(guess) {\n        guess = guess.toLowerCase()\n        const isUnique = !this.guessedLetters.includes(guess)\n        const isBadGuess = !this.word.includes(guess)\n\n        if (this.status !== 'playing') {\n            return\n        }\n\n        if (isUnique) {\n            this.guessedLetters.push(guess)\n        }\n\n        if (isUnique && isBadGuess) {\n            this.remainingGuesses--\n        }\n\n        this.calculateStatus()\n    }\n}","export const getPuzzle = async (wordCount) => {\n    const response = await fetch(`//puzzle.mead.io/puzzle?wordCount=${wordCount}`)\n    \n    if (response.status === 200) {\n        const data = await response.json()\n        return data.puzzle\n    } else {\n        throw new Error('Unable to get puzzle')\n    }\n}\n\nconst getCurrentCountry = async () => {\n    const location = await getLocation()\n    return getCountry(location.country)\n}\n\nconst getCountry = async (countryCode) => {\n    const response = await fetch('//restcountries.eu/rest/v2/all')\n\n    if (response.status === 200) {\n        const data = await response.json()\n        return data.find((country) => country.alpha2Code === countryCode)\n    } else {\n        throw new Error('Unable to fetch the country')\n    }\n}\n\nconst getLocation = async () => {\n    const response = await fetch('//ipinfo.io/json?token=1a11bd55cc8f9c')\n\n    if (response.status === 200) {\n        return response.json()\n    } else {\n        throw new Error('Unable to get the current location')\n    }\n}","import Hangman from './scripts/hangman'\nimport { getPuzzle } from './scripts/requests'\nimport './styles/index.scss'\n\nconst puzzleEl = document.querySelector('#puzzle')\nconst guessesEl = document.querySelector('#guesses')\nlet game1\n\nwindow.addEventListener('keypress', (e) => {\n    const guess = String.fromCharCode(e.charCode)\n    game1.makeGuess(guess)\n    render()\n})\n\nconst render = () => {\n    puzzleEl.innerHTML = ''\n    guessesEl.textContent = game1.statusMessage\n\n    game1.puzzle.split('').forEach((letter) => {\n        const letterEl = document.createElement('span')\n        letterEl.textContent = letter\n        puzzleEl.appendChild(letterEl)\n    })\n}\n\nconst startGame = async () => {\n    const puzzle = await getPuzzle('2')\n    game1 = new Hangman(puzzle, 5)\n    render()\n}\n\ndocument.querySelector('#reset').addEventListener('click', startGame)\n\nstartGame()"]}